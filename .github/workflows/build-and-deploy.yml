name: Deploy to Amazon ECS

on:
  workflow_call:
    inputs:
      AWS_REGION:
        required: true
        type: string
      ECR_REPOSITORY:
        required: true
        type: string
      ECS_SERVICE:
        required: true
        type: string
      ECS_CLUSTER:
        required: true
        type: string
      ECS_TASK_DEFINITION:
        required: true
        type: string
      REGISTRY_ALIAS:
        required: true
        type: string


env:
  AWS_REGION: ${{ inputs.AWS_REGION }}
  ECR_REPOSITORY: ${{ inputs.ECR_REPOSITORY }}
  ECS_SERVICE: ${{ inputs.ECS_SERVICE }}
  ECS_CLUSTER: ${{ inputs.ECS_CLUSTER }}
  ECS_TASK_DEFINITION: ${{ inputs.ECS_TASK_DEFINITION }}
  REGISTRY_ALIAS: ${{ inputs.REGISTRY_ALIAS }}

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        env:
          REGISTRY_ALIAS: b7v5m6y6
        run: |
          aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/$REGISTRY_ALIAS

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          REGISTRY_ALIAS: ${{ env.REGISTRY_ALIAS }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REPOSITORY:$IMAGE_TAG public.ecr.aws/$REGISTRY_ALIAS/$ECR_REPOSITORY:$IMAGE_TAG
          docker push public.ecr.aws/$REGISTRY_ALIAS/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=public.ecr.aws/$REGISTRY_ALIAS/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
      
      - name: Extract container name from task definition file
        id: extract-container-name
        env:
          ECS_TASK_DEFINITION: ${{ env.ECS_TASK_DEFINITION }}
        run: |
          NAME=$(jq -r .containerDefinitions[0].name $ECS_TASK_DEFINITION)
          echo "container-name=$NAME" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@c804dfbdd57f713b6c079302a4c01db7017a36fc
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ steps.extract-container-name.outputs.container-name }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@df9643053eda01f169e64a0e60233aacca83799a
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true