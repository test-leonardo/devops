name: build-and-deploy
  
on:
  workflow_call:
    inputs:
      API_NAME: 
        required: true
        type: string
      DOCKER_REPOSITORY: 
        required: true
        type: string

env:
  HOST: ${{ (github.ref == 'refs/heads/main') && secrets.PROD_HOST || (github.ref == 'refs/heads/preprod') && secrets.PREPROD_HOST || secrets.DEV_HOST }}
  KEY: ${{ (github.ref == 'refs/heads/main') && secrets.PROD_KEY || (github.ref == 'refs/heads/preprod') && secrets.PREPROD_KEY || secrets.DEV_KEY }}
  USERNAME: ${{ (github.ref == 'refs/heads/main') && secrets.PROD_USERNAME || (github.ref == 'refs/heads/preprod') && secrets.PREPROD_USERNAME || secrets.DEV_USERNAME }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Print branch name
      run: echo "${{ github.ref }}"
      shell: bash
      
    - name: Checkout current repository
      uses: actions/checkout@v3

    - name: Docker login
      run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
      shell: bash

    - name: Build the Docker image
      run: docker build -t ${{ inputs.API_NAME }} -f Dockerfile .
      shell: bash

    - name: Tag the Docker image
      run: docker tag ${{ inputs.API_NAME }} ${{ inputs.DOCKER_REPOSITORY }}:${{ inputs.API_NAME }}
      shell: bash

    - name: Push the Docker image
      run: docker push ${{ inputs.DOCKER_REPOSITORY }}:${{ inputs.API_NAME }}
      shell: bash
    
    - name: Launch application
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ env.HOST }}
        username: ${{ env.USERNAME }}
        key: ${{ env.KEY }}
        port: ${{ secrets.SSH_PORT }}
        script: |
          cd /app

          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "Running command on production instance"
          elif [[ "${{ github.ref }}" == "refs/heads/preprod" ]]; then
            echo "Running command on pre-production instance"
          else
            echo "Running command on development instance"
          fi
          sudo docker compose up -d --remove-orphans --pull always;
          sudo docker image prune -a -f;